{    #npu_instruct:1024
    #_dev_msg
    {    #device_message:32
        0x1,  #_index:8 @0:NPU-Reset; n:index of NPU
        0x1,  #_working_block_mode:4 @1:PE+VPU; 2:VPU/Resize
        0x0,  #_reserved:8
        0x8,  #_power_info:8 @0:invalid; n(1~8):number of working PGs
    },

    #_pe_cfg
    {    #pe_config:128
        0x1,  #_conv_mod:4; @0:conv model; 
            #0x0: PE not working; 0x1: Conv2D;          0x2: DepthwiseConv2D;
            #0x3: AtrousConv2D;   0x4: TransposeConv2D; 0x5: FC(InnerProduct);
            #0x6: DW+PW;          0x7~0xf: Reserved;
        0x0,  #_pe_pmod:4; @0:pe parallel model
            #0x0: PE 1OCH parallel within groups; 0x1:PE 2OCH parallel within groups;
            #0x2: PE 4OCH parallel within groups; 0x3~0xF:Reserved;
        0x0,  #_npu_pmode:4; @0:npu parallel model
            #0x0: whole OCH parallel;
            #0x1: PE in PG devided into two groups, ICH parallel within groups, OCH parallel between groups, OCH parallel between PGs;
            #0x2: PG devided into two  groups, OCH parallel within groups, RP parallel between groups;
            #0x3: PG devided into four groups, OCH parallel within groups, RP parallel between groups;
            #0x4~0xF: Reserved
        0x3,  #_krnl_size_h:8
        0x3,  #_krnl_size_w:8
        0x1,  #_pad_left:8
        0x1,  #_pad_right:8
        0x1,  #_pad_up:8
        0x1,  #_pad_down:8
        0x11,  #_stride_rate:8 @{Strides:[Sh, Sw]=[4bits, 4bits]}, {Rate:8bits}
        0x0,  #_bias:4
        0x0,  #_dw_bias:4
        0x0,  #_reserved_0:4
        0x0,  #_reserved_1:8
        0x0,  #_reserved_2:8
        0x0,  #_reserved_3:24
        0x0,  #_broadcast_info:8
            #0x0: 1-1 broadcast; 0x1: 1-2 broadcast; 0x2: 1-4 broadcast; 0x3: 1-8 broadcast
    },

    #_vr_cfg
    {   #vpu_resize_config:64
        #    _op::0x0:not work;         0x1:Eltwise-SUM(ADD)/ Prod/MAX;  0x2:Relu/Relu6/LReLU/PReLU;  0x3:ELU/Sigmoid
        #         0x4:MaxPool/AvgPool;  0x5:Globalpool;                  0x6:Resize(Upsample);        0x7:sgm;
        #         0x8:Eltwise+Relu;     0x9-0xF:Reserved
        #{    #pooling:64
        #    0x0,  #_op:4
        #    0x0,  #_type:4 @ 0x0:MAX; 0x1:AVG
        #    0x0,  #_krnl_size:4
        #    0x0,  #_strides:4
        #    0x0,  #_padding:4
        #    0x0,  #_size:32
        #    0x0,  #_reserved:12
        #},
        #{    #global_pooling:64
        #    0x0,  #_op:4
        #    0x0,  #_type:4 @ 0x0:MAX; 0x1:AVG
        #    0x0,  #_size:32 @ Value of 1/(Global Pooling Size2)
        #    0x0,  #_reserved:24
        #},
        #{    #upsample:64
        #    0x0,  #_op:4
        #    0x0,  #_type:4 @ 0x0:Upsample
        #    0x0,  #_scale:8
        #    0x0,  #_reserved_0:16
        #    0x0,  #_reserved_0:32
        #},
        #{    #sgm:64
        #    0x0,  #_op:4
        #    0x0,  #_type:4 @ 0x0:Gather 0x1:Disparity 0x2:Correlation 0x3:Division 0x4:Rightshift 0x5:channel-softmax 0x6:w-softmax
        #    0x0,  #_offset:12 act_ich act_och
        #    0x0,  #_reserved_0:44
        #},
        {    #eltwise_relu:64
            0x0,  #_op:4
            0x0,  #_type:4; @{Eltwise:0x0:ADD; 0x2:MAX; 0x3:PROD},
                  #          {ReLU:0x0:ReLU; 0x1:ReLU6; 0x2:LReLU; 0x3:PReLU},
                  #          {Exp: 0x0:ELU;0x2:Sigmoid}
            0x0,  #_a_value:32 @32 bits For LReLU
            0x0,  #_rule_type:4 @Eltwise+Relu model: 0x0:ReLU; 0x1:ReLU6; 0x2:LReLU; 0x3:PReLU
            0x0,  #_reserved_0:4
            0x0,  #_reserved_1:16
        },
    },

    #_q_cfg
    {    #quantization_config:128
        0x3f800000,  #_dequant_scale:32
        0x3f800000,  #_quant_scale:32
        0x0,  #_dequant_scale_1:32
        0x0,  #_quant_scale_1:32
    },

    #_in_data_cfg
    {    #data_feature_info:64
        0x1,  #_size_n:12
        0x4,  #_size_c:12
        0x1c,  #_size_h:12
        0x1c,  #_size_w:12
        0x2,  #_format:4 @0:NCHW(RGB); 1:NC2HW; 2:NC4HW4; 3:NC8HW; 4:NC16HW; b0011~4’b1110:Reserved
        0x2,  #_type:4 @0:Reserved; 1:Int16; 2:Int8; 3:Uint8(input); b0012~4’b1110:Reserved
        0x0,  #_reserved:8
    },

    #_out_data_cfg
    {    #data_feature_info:64
        0x1,  #_size_n:12
        0x20,  #_size_c:12
        0xe,  #_size_h:12
        0xe,  #_size_w:12
        0x2,  #_format:4 @0:NCHW(RGB); 1:NC2HW; 2:NC4HW4; 3:NC8HW; 4:NC16HW; b0011~4’b1110:Reserved
        0x2,  #_type:4 @0:Reserved; 1:Int16; 2:Int8; 3:Uint8(input); b0012~4’b1110:Reserved
        0x0,  #_reserved:8
    },

    #_mu_layer_ins
    {    #muti_layer_ins:64
        0x0,  #_start_position:4
        0x0,  #_layer_id:4
        0x0,  #_ins_num:8
        0x0,  #_ins_index:4
        0x2,  #_x_indentation:4 @indentation of x direction
        0x2,  #_y_indentation:4 @indentation of y direction
        0x0,  #_reserved:36
    },

    #_addr_info
    {    #addr_info:512
        0x0,  #_f_in:32 @ Input Feature Address
        0x2000000,  #_k_in:32 @ Input Kernel Address or 2nd Input Feature Address(Eltwise)
        0x4c00000,  #_f_out:32 @ Output Feature Address
        0x0,  #_bias:32 @ Bias Address(Conv, DW, Atrous, FC)
        0x0,  #_2nd_k_in:32 @ 2nd Kernel Address (In DW+PW Mode)
        0x0,  #_other_addr:32 @ Other potential information Address(αi in PReLU)
        0x0,  #_2nd_bias:32 @ 2nd Bias Address (In DW+PW Mode)
        0x4000000,  #_dequant_scale_addr:32 @ Dequant Address
        0x0,  #_2nd_dequant_scale_addr:32 @ 2nd Dequant Address (In DW+PW Mode)
        0x0,  #_reserved:192
    },
}
